<%--------------------------------------------------------------
 BENCHMARK RESULTS
 --------------------------------------------------------------%>
<% benchmarkResults <- function(stats, fcnname=levels(stats$expr)[1L], tags=NULL, ...) { %>

<% kable(summary(stats)) %>
_Figure: Benchmarking of <%=hpaste(sprintf("%s()", levels(stats$expr)), lastCollapse=" and ")%> on <%=paste(tags, collapse="+")%> data.  Times are in milliseconds._

![](<%=toPNG(fcnname, tags=c(tags, "benchmark"), aspectRatio=2/3, {
  gg <- qplot(x=seq_along(time)/length(levels(stats$expr)), y=time/1e6, data=stats, colour=expr)
  gg <- gg + xlab("iteration") + ylab("time (ms)")
  gg <- gg + ylim(0,NA)
  print(gg)
})%>)

<% } # benchmarkResults() %>


<%--------------------------------------------------------------
 COL- and ROW-WISE BENCHMARK RESULTS
 --------------------------------------------------------------%>
<% crBenchmarkResults <- function(colStats, rowStats=NULL, tags=NULL, ...) { %>

_Table: Benchmarking of <%=hpaste(sprintf("%s()", levels(colStats$expr)), lastCollapse=" and ")%> on <%=paste(tags, collapse="+")%> data. The top panel shows times in milliseconds and the bottom panel shows relative times._
<% kable(summary(colStats, order="median")) %>
<% kable(summary(colStats, order="median", unit="relative")) %>

<% if (!is.null(rowStats)) { %>
_Table: Benchmarking of <%=hpaste(sprintf("%s()", levels(rowStats$expr)), lastCollapse=" and ")%> on transposed <%=paste(tags, collapse="+")%> data.  The top panel shows times in milliseconds and the bottom panel shows relative times._
<% kable(summary(rowStats, order="median")) %>
<% kable(summary(rowStats, order="median", unit="relative")) %>
<% } # if (!is.null(rowStats)) %>


_Figure: Benchmarking of <%=hpaste(sprintf("%s()", levels(colStats$expr)), lastCollapse=" and ")%> on <%=paste(tags, collapse="+")%> data <% if (!is.null(rowStats)) { %> as well as <%=hpaste(sprintf("%s()", levels(rowStats$expr)), lastCollapse=" and ")%> on the same data transposed<% } # if (!is.null(rowStats)) %>.  Outliers are displayed as crosses.  Times are in milliseconds._

<% toImage <- function(stats, name=levels(stats$expr)[1L], ylim=NULL, ...) { %>
![](<%=toPNG(name, tags=c(tags, "benchmark"), aspectRatio=2/3, {
  if (!is.null(ylim)) {
    stats$outlier <- (stats$time > ylim[2]*1e6)
    stats$time[stats$outlier] <- ylim[2]*1e6
  }
  gg <- ggplot(data=stats, aes(x=seq_along(time)/length(levels(expr)), y=time/1e6))
  gg <- gg + geom_point(aes(colour=expr, shape=outlier))
  gg <- gg + scale_shape_manual(values=c(16,4), guide="none")
  gg <- gg + xlab("iteration") + ylab("time (ms)")
  if (!is.null(ylim)) gg <- gg + ylim(ylim)
  print(gg)
})%>)
<% } # toImage() %>

<%
y <- c(colStats$time, rowStats$time)/1e6
ymax <- max(y, na.rm=TRUE)
y75 <- quantile(y, probs=0.75, na.rm=TRUE)
yupper <- min(c(1.5*y75, ymax), na.rm=TRUE)
ylim <- c(0, yupper)
%>

<% toImage(colStats, ylim=ylim) %>
<% if (!is.null(rowStats)) toImage(rowStats, ylim=ylim) %>

<% if (!is.null(rowStats)) { %>
<%
# Compare performance or the column- and the row-specific methods
# for the "main" function.
stats <- list(colStats, rowStats)
stats <- lapply(stats, FUN=function(x) {
  level <- levels(x$expr)[1]
  x <- subset(x, expr %in% level)
  x$expr <- factor(as.character(x$expr))
  x
})
stats <- Reduce(rbind, stats)
odd <- seq(from=1L, to=nrow(stats), by=2L)
top <- 1:(nrow(stats)/2)
stats0 <- stats
stats[ odd,] <- stats0[ top,]
stats[-odd,] <- stats0[-top,]
%>

_Table: Benchmarking of <%=hpaste(sprintf("%s()", levels(stats$expr)), lastCollapse=" and ")%> on <%=paste(tags, collapse="+")%> data (original and transposed).  The top panel shows times in milliseconds and the bottom panel shows relative times._
<% kable(summary(stats, order="median")) %>
<% kable(summary(stats, order="median", unit="relative")) %>


_Figure: Benchmarking of <%=hpaste(sprintf("%s()", levels(stats$expr)), lastCollapse=" and ")%> on <%=paste(tags, collapse="+")%> data (original and transposed).  Outliers are displayed as crosses. Times are in milliseconds._

<%
y <- stats$time/1e6
ymax <- max(y, na.rm=TRUE)
y75 <- quantile(y, probs=0.75, na.rm=TRUE)
yupper <- min(c(1.5*y75, ymax), na.rm=TRUE)
ylim <- c(0, yupper)
%>
<% toImage(stats, name=paste(levels(stats$expr), collapse="_vs_"), ylim=ylim) %>
<% } # if (!is.null(rowStats)) %>

<% } # crBenchmarkResults() %>
